#####################################
##### System Information
#####################################
# Property: system.sudo
system.sudo=false

#####################################
##### static information
#####################################
# Property: install.module.directory
install.module.directory=install

## Comment
# Property: service.title
# 서비스 설명
service.title=SMARTFACTORY_AI_PLATFORM

# Property: service_properteis
service.properties=${install.dir}/service.properties

#####################################
##### deploy module
##### (deploy.sh)
#####################################

# Property: root.dir
root.dir=${sys:user.home}/sf-tsp

# Property: group
group=

# Property: group
group.root.dir=${root.dir}/

# Property: group.bin.dir
group.bin.dir=${group.root.dir}/bin

# Property: group.log.dir
group.log.dir=${group.root.dir}/logs

# Property: build.name
build.name=sf-tsp-web

# Property: build.file
# ...
# <build>
# 	<finalName>${build.name}</finalName>
# ...
# </build>
# ...
# <formats>
# 	<format>tar.gz</format>
# </formats>
# 파일 확장자는 반드시 tar.gz
build.file=${build.name}.tar.gz

#####################################
##### install module
##### (run-install.sh)
#####################################
# Property: install.module.script.desc
install.module.script.desc=### THIS IS KASI WEB SERVICE###

# Property: install.dir
# 절대경로로 설정할 것.
# !!! 프로그램에 따라 수정할 것. !!!
install.dir=${group.bin.dir}/${build.name}

# Property: log.dir
# 절대경로로 설정할 것.
# since 2019-11-05
log.dir=${group.log.dir}/${build.name}

# Property: logfile.name
# since: 2020-03-03
logfile.name=${build.name}.log

# Property: files.configuration.filenames
# 내용을 변경할 파일 목록
# since: 2020-02-24 
files.configuration.filenames=start.sh stop.sh status.sh
# Property: <filename>.configuration.properties
# 파일별 변경할 속성명
# since: 2020-02-24
start.sh.configuration.properties=install.dir application.name execution.filename execution.opts jdwp.port
stop.sh.configuration.properties=application.name
status.sh.configuration.properties=install.dir service.name application.name

# Property: resources.directories
# 복사할 디렉토리명(빈칸으로 구분)
# ./assemble/assembly-package-all.xml 에 정의된 내용을 참고.
# !!! 프로그램에 따라 수정할 것. !!!
resources.directories=config

# Property: ${directory}.configuration.file
# 디렉토리에 있는 파일 내용을 변경.
# 예) \*: 모든 파일
#    다중 파일:  빈칸으로 구분하며, 파일명에 빈칸은 올 수 없다.
# since 2020-02-17
# !!! 프로그램에 따라 수정할 것. !!!
# 파일위치: ./config
config.configuration.filenames=log4j2.yml
log4j2.yml.configuration.properties=log.dir build.name logfile.name

# 파일위치: ./crontab
crontab.configuration.filenames=crontab.cron
crontab.sh.configuration.properties="log.dir" 'service.title' install.dir

# 파일위치: ./monitor
monitor.configuration.filenames=\*
monitor.configuration.properties=log.dir build.name root.dir service.name application.name

# Property: service.registration
# 서비스로 등록할 지 여부. (N: No, Y: Yes, CASE_SENSITIVE)
service.registration=Y

# Property: service.autostart
# 서비스인 경우 자동 시작할지 여부. (N: No, Y: Yes, CASE_SENSITIVE)
service.autostart=Y

# Property: service.registration.message 
# 서비스 등록용 메시지
service.registration.message=Start to install '${service.title}'

#####################################
##### install as a service module
##### (install-as-a-service.sh)
##### ENABLE IF $service.registration=Y 
#####################################

# Property: service.name
# CentOS7 등록될 서비스명
service.name=${build.name}

# Property: service.dir.<os>.<version>
# 서비스 파일 설치 디렉토리.
# CentOS 6 : /etc/init.d
# CentOS 7 : /usr/lib/systemd/system
# Red Hot 6: /etc/init.d
# Ubuntu 16: /usr/lib/systemd/system
# Ubuntu 18: /lib/systemd/system
# since: 2020-02-24
service.dir.centos.6=/etc/init.d
service.dir.centos.7=/usr/lib/systemd/system
service.dir.red.6=${service.dir.centos.6}
service.dir.ubuntu.16=${service.dir.centos.7}
service.dir.ubuntu.18=/lib/systemd/system

# Property: service.file.description
# ...
# [Unit]
# Description: ${service.file.description}
# ...
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.description=${service.title}

# Property: service.file.exec_start
# [Service]
# ExecStart: ${service.file.exec_start}
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.exec_start=${install.dir}/start.sh

# Property: service.file.exec_stop
# for CentOS7 / Ubuntu 16 or higher
# [Service]
# ExecStop: ${service.file.exec_stop}
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.exec_stop=${install.dir}/stop.sh

# Property: service.file.exec_stop
# since: 2020-03-03
service.file.exec_status=${install.dir}/status.sh

### begin: for CentOS7 / Ubuntu 16 or higher
## Unit
# Property: service.file.after
# for CentOS7 / Ubuntu 16 or higher
# ...
# [Unit]
# After: ${service.file.after}
# ...
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.after=networ.target

## Service
# Property: service.file.type

# [Service]
# Type: ${service.file.type}
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.type=forking

# Property: service.file.user
# [Service]
# User: ${service.file.user}
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.user=${sys:username}

# Property: service.file.group
# [Service]
# Group: ${service.file.group}
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.group=${sys:username}

## Install
# Property: service.file.wantedby
# for CentOS7 / Ubuntu 16 or higher
# [Install]
# WantedBy: ${service.file.wantedby}
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.wantedby=multi-user.target
### end: for CentOS7 / Ubuntu 16 or higher#

###########################################
#####
#####  일반적인 Application 인 경우
#####
##### 제어 shell script
##### (start,sh, stop.sh, status.sh, etc ...)
###########################################
# Property: execution.filename
# 실행 파일명
# !!! 프로그램에 따라 수정할 것. !!!
execution.filename=${build.name}.war

# execution file 실행시 추가 옵션
execution.opts=

# Property: application.name
# 실행이름
# since: 2019-10-16
# !!! 프로그램에 따라 수정할 것. !!!
application.name=SMARTFACTORY_AI_PLATFORM

#####################################
##### JDWP
#####################################
# Property: jdwp.port
# 원격 디버깅시 사용하는 포트
jdwp.port=40080